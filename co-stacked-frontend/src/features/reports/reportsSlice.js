// src/features/reports/reportsSlice.js

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import API from '../../api/axios'; // From user app's api folder

// ===================================================================
// ASYNC THUNK
// ===================================================================

/**
 * An async thunk for submitting a content report to the backend.
 */
export const submitReport = createAsyncThunk(
    'reports/submit',
    async (reportData, { rejectWithValue }) => {
        try {
            const response = await API.post('/reports', reportData);
            return response.data; // The backend should return a success message, e.g., { message: '...' }
        } catch(error) {
            // Send the error message from the backend as the payload for the rejected action
            return rejectWithValue(error.response.data?.message || 'Failed to submit report.');
        }
    }
);

// ===================================================================
// THE REPORTS SLICE
// ===================================================================

const initialState = {
    // We don't need to store a list of reports here in the user app,
    // just the status of the submission action.
    status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
    error: null,
};

const reportsSlice = createSlice({
    name: 'reports',
    initialState,
    // Standard synchronous reducers can be added here if needed in the future
    reducers: {},
    // Handles the lifecycle of our async thunk
    extraReducers: (builder) => {
        builder
            .addCase(submitReport.pending, (state) => {
                state.status = 'loading';
                state.error = null;
            })
            .addCase(submitReport.fulfilled, (state) => {
                state.status = 'succeeded';
            })
            .addCase(submitReport.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.payload; // The error message from rejectWithValue
            });
    },
});

// Export the reducer function generated by createSlice as the default export.
// This is the crucial line that was missing and causing the error.
export default reportsSlice.reducer;